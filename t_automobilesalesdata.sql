CREATE DATABASE AUTOMOBILE
USE AUTOMOBILE
SELECT *
FROM Auto_Sales


--CREATE A NEW COLUMN CONTACTNAME THAT COMBINES FIRST AND LAST NAMES TOGETHER--
ALTER TABLE AUTO_SALES
ADD CONTACTNAME VARCHAR;

ALTER TABLE AUTO_SALES
ALTER COLUMN CONTACTNAME NVARCHAR(50)
UPDATE AUTO_SALES
SET CONTACTNAME = CONCAT(CONTACTFIRSTNAME, ' ', CONTACTLASTNAME)

SELECT ordernumber, quantityordered, priceeach, sales, orderdate, COUNT(*)
FROM Auto_Sales
GROUP BY ordernumber, quantityordered, priceeach, sales, orderdate
HAVING COUNT(*) > 1;



--CHECK IF ORDERNUMBERS ARE DUPLICATED--
SELECT ORDERNUMBER, COUNT(ORDERNUMBER)
FROM Auto_Sales
GROUP BY ORDERNUMBER
ORDER BY COUNT(ORDERNUMBER) DESC

--What is the earliest order date in the dataset?
SELECT MIN(ORDERDATE)
FROM AUTO_SALES 

--Last order date

SELECT MAX(ORDERDATE)
FROM AUTO_SALES 

---how many productlines?
SELECT DISTINCT(productline)
FROM Auto_Sales

---how many dealsizes?
SELECT DISTINCT(dealsize)
FROM Auto_Sales

--What is the total sales amount
SELECT ROUND(SUM (SALES),2) AS TOTAL_SALES
FROM Auto_Sales

--tOP 10 CUSTOMERS BASED ON NUMBER OF ORDERS?
SELECT TOP 10 CUSTOMERNAME, count(customername) as no_of_orders
FROM Auto_Sales
GROUP BY CUSTOMERNAME
ORDER BY COUNT(CUSTOMERNAME) DESC

--What is the average quantity ordered--
SELECT AVG(QUANTITYORDERED) AS AVERAGE_QUANTITY_ORDERED
FROM Auto_Sales

--Which product has the highest sales (based on the 'SALES' column)
SELECT PRODUCTLINE, ROUND(SUM(SALES),2) AS TOTAL_SALES
FROM Auto_Sales
GROUP BY PRODUCTLINE
ORDER BY TOTAL_SALES DESC

--WHICH PRODUCT HAS THE HIGHEST SALES(BASED ON QUANTITY ORDERED)
SELECT PRODUCTLINE, SUM(QUANTITYORDERED) AS QUANTITY_ORDERED
FROM Auto_Sales
GROUP BY PRODUCTLINE
ORDER BY QUANTITY_ORDERED DESC


--QUANTITY AND SALES OF DIFFERENT PRODUCT LINES
SELECT PRODUCTLINE, ROUND(AVG(PRICEEACH),2) AS AVERAGE_PRICE, SUM(QUANTITYORDERED) AS QUANTITY_ORDERED, ROUND(SUM(SALES),2) AS TOTAL_SALES
FROM Auto_Sales
GROUP BY PRODUCTLINE
ORDER BY TOTAL_SALES DESC

--What is the average price for each product line
SELECT PRODUCTLINE, ROUND(AVG(PRICEEACH),2) AS AVERAGE_PRICE
FROM AUTO_SALES
GROUP BY PRODUCTLINE
ORDER BY AVERAGE_PRICE DESC

--How many different product codes are there
SELECT COUNT(DISTINCT(PRODUCTCODE)) AS PRODUCTCODE_COUNT, COUNT(DISTINCT(PRODUCTline)) AS PRODUCTline_COUNT
FROM Auto_Sales



--HOW MANY ORDERS WERE MADE EACH YEAR 
SELECT YEAR(ORDERDATE) AS YEAR, COUNT(YEAR(ORDERDATE)) AS NO_OF_ORDERS
FROM Auto_sales
GROUP BY YEAR(ORDERDATE) 
ORDER BY year

--patterns or trends in the order dates?
SELECT YEAR(ORDERDATE) as year, MONTH(ORDERDATE) as month, COUNT(MONTH(ORDERDATE)) as no_of_orders, round(sum(sales),2) as total_sales
FROM Auto_Sales
GROUP BY YEAR(ORDERDATE), MONTH(ORDERDATE)
ORDER BY YEAR(ORDERDATE), MONTH(ORDERDATE)

--Who are the top 5 customers with the highest total sales?
SELECT TOP 5 CUSTOMERNAME, ROUND(SUM(SALES),2) AS TOTAL_SALES
FROM Auto_Sales
GROUP BY CUSTOMERNAME
ORDER BY TOTAL_SALES DESC

--TOP CUSTOMERS IN TERMS OF NO OF ORDERS IN ALL COUNTRY?
SELECT COUNTRY, MAX(CUSTOMERNAME) AS TOP_CUSTOMER
FROM AUTO_SALES
GROUP BY COUNTRY


--country sales distribution
SELECT COUNTRY,COUNT(COUNTRY) AS N0_OF_ORDERS
FROM Auto_Sales
GROUP BY COUNTRY
ORDER BY N0_OF_ORDERS DESC


--What is the average deal size for different customers
SELECT CUSTOMERNAME, MAX(DEALSIZE)
FROM Auto_Sales
GROUP BY CUSTOMERNAME

--dealsize distribution
SELECT DEALSIZE, count(DEALSIZE) as COUNT
FROM Auto_Sales
GROUP BY DEALSIZE
ORDER BY COUNT DESC

--RFM ANALYSIS based on cummulative rfm score
CREATE VIEW RFM AS
WITH RFM_TABLE AS
(SELECT customername, min(days_since_lastorder) as DAYSSINCELASTORDER,
ROUND((PERCENT_RANK() OVER (ORDER BY min(DAYS_SINCE_LASTORDER) DESC))*10, 1) AS RECENCY,
sum(QUANTITYORDERED) as QUANTITYORDERED, ROUND((PERCENT_RANK() OVER (ORDER BY sum(QUANTITYORDERED)))*10, 1) as FREQUENCY,
sum(sales) as SALESAMOUNT, ROUND((PERCENT_RANK() OVER (ORDER BY sum(sales)))*10, 1) as MONETARY
FROM AUTO_SALES
group by CUSTOMERNAME)
SELECT CUSTOMERNAME, RECENCY,FREQUENCY,MONETARY,
NTILE(5) OVER (ORDER BY (RECENCY+FREQUENCY+MONETARY)) AS RFM_SCORE,
CASE 
WHEN NTILE(5) OVER (ORDER BY (RECENCY+FREQUENCY+MONETARY))=1
THEN 'inactive customer'
WHEN NTILE(5) OVER (ORDER BY (RECENCY+FREQUENCY+MONETARY))=2
THEN 'bronze customer'
WHEN NTILE(5) OVER (ORDER BY (RECENCY+FREQUENCY+MONETARY))=3
THEN 'silver customer'
WHEN NTILE(5) OVER (ORDER BY (RECENCY+FREQUENCY+MONETARY))=4
THEN 'gold customer'
ELSE 'premium customer'
END AS customercategory
FROM RFM_TABLE
order by RFM_SCORE

--RFM ANALYSIS based on cummulative rfm score
CREATE VIEW RFM AS
WITH RFM_TABLE AS
(SELECT customername, min(days_since_lastorder) as DAYSSINCELASTORDER,
ROUND((PERCENT_RANK() OVER (ORDER BY min(DAYS_SINCE_LASTORDER) DESC))*10, 1) AS RECENCY,
sum(QUANTITYORDERED) as QUANTITYORDERED, ROUND((PERCENT_RANK() OVER (ORDER BY sum(QUANTITYORDERED)))*10, 1) as FREQUENCY,
sum(sales) as SALESAMOUNT, ROUND((PERCENT_RANK() OVER (ORDER BY sum(sales)))*10, 1) as MONETARY
FROM AUTO_SALES
group by CUSTOMERNAME)
SELECT CUSTOMERNAME, RECENCY,FREQUENCY,MONETARY,
CASE
WHEN Recency >= 8 AND Frequency >= 8 AND Monetary >= 8 THEN 'Premium Customer'
        WHEN Recency >= 6  AND Frequency >= 7 AND Monetary >= 7 THEN 'Gold Customer'
        WHEN Recency >= 5 AND Frequency >= 5 AND Monetary >= 5 THEN 'Silver Customer'
        WHEN Recency >= 3 or (Frequency >= 3 AND Monetary >= 3) THEN 'Bronze Customer'
        ELSE 'Inactive Customer'
    END AS CustomerCategory
FROM RFM_TABLE

select * from rfm
+
SELECT Customercategory, count(customercategory) AS COUNT
FROM rfm
GROUP BY customercategory
ORDER BY count DESC







	





